<div  class="table-box">
   <div class="SD-topo-box-title">
    <span>Répartition annuelle des dépenses de l'état par action</span>
  </div><br><br>
  <div class="row">
    <div class="col-md-6">
      <div id="bar-solideo"></div>
    </div>
    <div class="col-md-6">
      <div id="bar-cojo"></div>
    </div>
  </div>
  <div class="row">
    <div class="col-md-6">
      <div id="bar-heritage"></div>
    </div>
    <div class="col-md-6">
      <div id="bar-hp"></div>
    </div>
  </div>
<br><br>
  <div class="SD-topo-box-title">
    <span>Répartition annuelle des dépenses de l'état en K€ (CP consommés / CP prévus)</span>
  </div><br><br>
  <% if !@etat_depenses_array.nil? && !@etat_depenses_array.empty? %>

    <div class="ED_table hidden-xs">
      <table class="table-striped">
        <thead>
          <tr>
            <th scope="col">Dates</th>
            <th scope="col"><%= link_to solideo_depenses_path do %>Solideo<%end%></th>
            <th scope="col">Cojo</th>
            <th scope="col">Héritage</th>
            <th scope="col">Haute Performance</th>
            <th scope="col" class="border-none">Total</th>
          </tr>
        </thead>
        <tbody>
          <% @etat_depenses_array.each do |date| %>
          <tr>
            <th scope="row"><%= date.strftime('%Y') %></th>
            <td><div class="table-row"><div class="table-row-left"><%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "solideo", date+1.day,date-1.day ).sum('cp_conso')/1000).to_i, :delimiter => ' ') %> </div> <div class="table-row-right"> / <%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ? ', "solideo",date+1.day, date-1.day).sum('cp_prevu')/1000).to_i, :delimiter => ' ') %> <% if EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "solideo", date+1.day,date-1.day ).sum('cp_conso').to_i > EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "solideo", date+1.day,date-1.day ).sum('cp_prevu').to_i%><i class="fas fa-exclamation-circle"></i><% end %></div></div></td>
            <td><div class="table-row"><div class="table-row-left"><%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "cojo", date+1.day,date-1.day ).sum('cp_conso')/1000).to_i, :delimiter => ' ') %> </div> <div class="table-row-right"> / <%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "cojo", date+1.day, date-1.day).sum('cp_prevu')/1000).to_i, :delimiter => ' ') %> <% if EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "cojo", date+1.day,date-1.day ).sum('cp_conso').to_i > EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "cojo", date+1.day,date-1.day ).sum('cp_prevu').to_i%><i class="fas fa-exclamation-circle"></i><% end %></div></div></td>
            <td><div class="table-row"><div class="table-row-left"><%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "heritage", date+1.day, date-1.day ).sum('cp_conso')/1000).to_i, :delimiter => ' ') %> </div> <div class="table-row-right"> / <%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ? ', "heritage",date+1.day, date-1.day).sum('cp_prevu')/1000).to_i, :delimiter => ' ') %> <% if EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "heritage", date+1.day,date-1.day ).sum('cp_conso').to_i > EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "heritage", date+1.day,date-1.day ).sum('cp_prevu').to_i%><i class="fas fa-exclamation-circle"></i><% end %></div></div> </td>
            <td><div class="table-row"><div class="table-row-left"><%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "hauteperformance",date+1.day, date-1.day).sum('cp_conso')/1000).to_i, :delimiter => ' ') %> </div> <div class="table-row-right"> / <%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ? ', "hauteperformance",date+1.day, date-1.day).sum('cp_prevu')/1000).to_i, :delimiter => ' ') %> <% if EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "hauteperformance", date+1.day,date-1.day ).sum('cp_conso').to_i > EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "hauteperformance", date+1.day,date-1.day ).sum('cp_prevu').to_i%><i class="fas fa-exclamation-circle"></i><% end %></div></div></td>
            <td class="border-none"><div class="table-row"><div class="table-row-left"><%= number_with_delimiter((EtatDepense.where('date <= ? AND date >= ?', date+1.day, date-1.day).sum('cp_conso')/1000).to_i, :delimiter => ' ') %> </div> <div class="table-row-right"> / <%= number_with_delimiter((EtatDepense.where('date <= ? AND date >= ? ',date+1.day, date-1.day).sum('cp_prevu')/1000).to_i, :delimiter => ' ') %> <% if EtatDepense.where('date <= ? AND date >= ?', date+1.day,date-1.day ).sum('cp_conso').to_i > EtatDepense.where('date <= ? AND date >= ?', date+1.day,date-1.day ).sum('cp_prevu').to_i%><i class="fas fa-exclamation-circle"></i><% end %></div></div></td>
          </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  
    <div class="ED_table visible-xs">
      <table class="table-striped">
        <thead></thead>
         
        <tbody>
         <% @etat_depenses_array.each do |date| %>
          <tr><td>
          
            <div class="table-row-xs"><b><%= date.strftime('%Y') %></b></div>
          
            <div class="table-row-xs">SOLIDEO <span class="pull-right"><%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "solideo", date+1.day,date-1.day ).sum('cp_conso')/1000).to_i, :delimiter => ' ') %>  / <%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ? ', "solideo",date+1.day, date-1.day).sum('cp_prevu')/1000).to_i, :delimiter => ' ') %> <% if EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "solideo", date+1.day,date-1.day ).sum('cp_conso').to_i > EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "solideo", date+1.day,date-1.day ).sum('cp_prevu').to_i%><i class="fas fa-exclamation-circle"></i><% end %></span></div>
              
            <div class="table-row-xs">COJO <span class="pull-right"><%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "cojo", date+1.day,date-1.day ).sum('cp_conso')/1000).to_i, :delimiter => ' ') %> / <%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "cojo", date+1.day, date-1.day).sum('cp_prevu')/1000).to_i, :delimiter => ' ') %> <% if EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "cojo", date+1.day,date-1.day ).sum('cp_conso').to_i > EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "cojo", date+1.day,date-1.day ).sum('cp_prevu').to_i%><i class="fas fa-exclamation-circle"></i><% end %></span></div>
              
            <div class="table-row-xs">HÉRITAGE <span class="pull-right"><%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "heritage", date+1.day, date-1.day ).sum('cp_conso')/1000).to_i, :delimiter => ' ') %> / <%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ? ', "heritage",date+1.day, date-1.day).sum('cp_prevu')/1000).to_i, :delimiter => ' ') %> <% if EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "heritage", date+1.day,date-1.day ).sum('cp_conso').to_i > EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "heritage", date+1.day,date-1.day ).sum('cp_prevu').to_i%><i class="fas fa-exclamation-circle"></i><% end %></span></div> 
              
            <div class="table-row-xs" >HAUTEPERFORMANCE <span class="pull-right"><%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "hauteperformance",date+1.day, date-1.day).sum('cp_conso')/1000).to_i, :delimiter => ' ') %>  / <%= number_with_delimiter((EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ? ', "hauteperformance",date+1.day, date-1.day).sum('cp_prevu')/1000).to_i, :delimiter => ' ') %> <% if EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "hauteperformance", date+1.day,date-1.day ).sum('cp_conso').to_i > EtatDepense.where('beneficiaire = ? AND date <= ? AND date >= ?', "hauteperformance", date+1.day,date-1.day ).sum('cp_prevu').to_i%><i class="fas fa-exclamation-circle"></i><% end %></span></div>
              
            <div class="table-row-xs table-bottom">TOTAL <span class="pull-right"><%= number_with_delimiter((EtatDepense.where('date <= ? AND date >= ?', date+1.day, date-1.day).sum('cp_conso')/1000).to_i, :delimiter => ' ') %> / <%= number_with_delimiter((EtatDepense.where('date <= ? AND date >= ? ',date+1.day, date-1.day).sum('cp_prevu')/1000).to_i, :delimiter => ' ') %> <% if EtatDepense.where('date <= ? AND date >= ?', date+1.day,date-1.day ).sum('cp_conso').to_i > EtatDepense.where('date <= ? AND date >= ?', date+1.day,date-1.day ).sum('cp_prevu').to_i%><i class="fas fa-exclamation-circle"></i><% end %></span></div>
          </td></tr>
         <% end %>
        </tbody>
         
      </table>
    </div>
  
  
    <div class="EB-details">
    <%= link_to "détails des dépenses" , etat_depenses_path %>
    </div>
  <% else %>
    <div>
      Aucune dépense renseignée
    </div>
  <%end%>
  
   
 
  
 
    
</div>
<br><br>

<div  class="table-box">
  <div class="SD-topo-box-title">
    <span>Évolution de la maquette budgétaire de l'état</span>
  </div><br><br>

    <div id="container-chart">
      
    </div><br>
</div><br><br>

<script>
  Highcharts.chart('bar-solideo', {
    chart: {
        type: 'column',
    height:'250px',
      backgroundColor: '#fff',
          style:{
          fontFamily: "Marianne Regular",
     
          },
    },
    title: {
       text: 'Suivi annuel des dépenses pour la Solideo',
       verticalAlign: "bottom",
        style: {
                  color: "#8F8F8F",
                  fontWeight: "400",
          fontStyle: 'italic',
          fontSize: '12px',
                  },
    },

    xAxis: {
        categories: ['Dépenses 2018', 'Dépenses 2019',  "Dépenses 2020","Dépenses 2021", "Budget 2021", "Cumul"],
        crosshair: true
    },
    yAxis: {
        min: 0,
        title: {
            text: 'Budget Consommé (M€)'
        },
      gridLineColor: "#fff",
    },
  legend: {
    enabled: false,
  },
    tooltip: {
        headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
        pointFormat: '<tr><td style="padding:0"><b>{series.name} : </b></td>' +
            '<td style="padding:0"><b> {point.y:.1f} M€</b></td></tr>',
        footerFormat: '</table>',
        shared: true,
        useHTML: true,
       borderColor: 'transparent',
   borderRadius: 16,
   backgroundColor: '#fff',
    },
    plotOptions: {
        column: {
            pointPadding: 0.2,
            borderWidth: 0,
            grouping: false,
          dataLabels: {
                enabled: true
            }
        }
    },
    series: [{
        name: 'Budget',
        data: [{y:<%= (EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2018,1,1), Date.new(2018,12,31),"solideo").sum('cp_conso')/1000000).to_i %>, color: "#2E5D63" },
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2019,1,1), Date.new(2019,12,31),"solideo").sum('cp_conso')/1000000).to_i%>, color:"#2E5D63" },
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2020,1,1), Date.new(2020,12,31),"solideo").sum('cp_conso')/1000000).to_i%>, color: "#2E5D63"},
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2021,1,1), Date.new(2021,12,31),"solideo").sum('cp_conso')/1000000).to_i%>, color: "#2E5D63"},
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2021,1,1), Date.new(2021,12,31),"solideo").sum('cp_prevu')/1000000).to_i%>, color: "#bfbfbf"},
          {y:<%=(EtatDepense.where('beneficiaire = ?',"solideo").sum('cp_conso')/1000000).to_i%>, color: "#76505B"}],
        pointPlacement: 0,
    },]
});
 </script> 
<script>
  Highcharts.chart('bar-cojo', {
    chart: {
        type: 'column',
    height:'250px',
      backgroundColor: '#fff',
          style:{
          fontFamily: "Marianne Regular",
     
          },
    },
    title: {
       text: 'Suivi annuel des dépenses pour le Cojo',
       verticalAlign: "bottom",
        style: {
                  color: "#8F8F8F",
                  fontWeight: "400",
          fontStyle: 'italic',
          fontSize: '12px',
                  },
    },

    xAxis: {
        categories: ['Dépenses 2018', 'Dépenses 2019',  "Dépenses 2020","Dépenses 2021", "Budget 2021", "Cumul"],
        crosshair: true
    },
    yAxis: {
        min: 0,
        title: {
            text: 'Budget Consommé (M€)'
        },
      gridLineColor: "#fff",
    },
  legend: {
    enabled: false,
  },
    tooltip: {
        headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
        pointFormat: '<tr><td style="padding:0"><b>{series.name} : </b></td>' +
            '<td style="padding:0"><b> {point.y:.1f} M€</b></td></tr>',
        footerFormat: '</table>',
        shared: true,
        useHTML: true,
       borderColor: 'transparent',
   borderRadius: 16,
   backgroundColor: '#fff',
    },
    plotOptions: {
        column: {
            pointPadding: 0.2,
            borderWidth: 0,
            grouping: false,
          dataLabels: {
                enabled: true
            }
        }
    },
    series: [{
        name: 'Budget',
        data: [{y:<%= (EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2018,1,1), Date.new(2018,12,31),"cojo").sum('cp_conso')/1000000).to_i %>, color: "#2E5D63" },
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2019,1,1), Date.new(2019,12,31),"cojo").sum('cp_conso')/1000000).to_i%>, color:"#2E5D63" },
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2020,1,1), Date.new(2020,12,31),"cojo").sum('cp_conso')/1000000).to_i%>, color: "#2E5D63"},
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2021,1,1), Date.new(2021,12,31),"cojo").sum('cp_conso')/1000000).to_i%>, color: "#2E5D63"},
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2021,1,1), Date.new(2021,12,31),"cojo").sum('cp_prevu')/1000000).to_i%>, color: "#bfbfbf"},
          {y:<%=(EtatDepense.where('beneficiaire = ?',"cojo").sum('cp_conso')/1000000).to_i%>, color: "#76505B"}],
        pointPlacement: 0,
    },]
  });
</script> 
<script>
  Highcharts.chart('bar-heritage', {
    chart: {
        type: 'column',
    height:'250px',
      backgroundColor: '#fff',
          style:{
          fontFamily: "Marianne Regular",
     
          },
    },
    title: {
       text: 'Suivi annuel des dépenses pour Héritage',
       verticalAlign: "bottom",
        style: {
                  color: "#8F8F8F",
                  fontWeight: "400",
          fontStyle: 'italic',
          fontSize: '12px',
                  },
    },

    xAxis: {
        categories: ['Dépenses 2018', 'Dépenses 2019',  "Dépenses 2020","Dépenses 2021", "Budget 2021", "Cumul"],
        crosshair: true
    },
    yAxis: {
        min: 0,
        title: {
            text: 'Budget Consommé (M€)'
        },
      gridLineColor: "#fff",
    },
  legend: {
    enabled: false,
  },
    tooltip: {
        headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
        pointFormat: '<tr><td style="padding:0"><b>{series.name} : </b></td>' +
            '<td style="padding:0"><b> {point.y:.1f} M€</b></td></tr>',
        footerFormat: '</table>',
        shared: true,
        useHTML: true,
       borderColor: 'transparent',
   borderRadius: 16,
   backgroundColor: '#fff',
    },
    plotOptions: {
        column: {
            pointPadding: 0.2,
            borderWidth: 0,
            grouping: false,
          dataLabels: {
                enabled: true
            }
        }
    },
    series: [{
        name: 'Budget',
        data: [{y:<%= (EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2018,1,1), Date.new(2018,12,31),"heritage").sum('cp_conso')/1000000).to_i %>, color: "#2E5D63" },
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2019,1,1), Date.new(2019,12,31),"heritage").sum('cp_conso')/1000000).to_i%>, color:"#2E5D63" },
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2020,1,1), Date.new(2020,12,31),"heritage").sum('cp_conso')/1000000).to_i%>, color: "#2E5D63"},
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2021,1,1), Date.new(2021,12,31),"heritage").sum('cp_conso')/1000000).to_i%>, color: "#2E5D63"},
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2021,1,1), Date.new(2021,12,31),"heritage").sum('cp_prevu')/1000000).to_i%>, color: "#bfbfbf"},
          {y:<%=(EtatDepense.where('beneficiaire = ?',"heritage").sum('cp_conso')/1000000).to_i%>, color: "#76505B"}],
        pointPlacement: 0,
    },]
  });
</script> 
<script>
  Highcharts.chart('bar-heritage', {
    chart: {
        type: 'column',
    height:'250px',
      backgroundColor: '#fff',
          style:{
          fontFamily: "Marianne Regular",
     
          },
    },
    title: {
       text: 'Suivi annuel des dépenses pour Haute Performance',
       verticalAlign: "bottom",
        style: {
                  color: "#8F8F8F",
                  fontWeight: "400",
          fontStyle: 'italic',
          fontSize: '12px',
                  },
    },

    xAxis: {
        categories: ['Dépenses 2018', 'Dépenses 2019',  "Dépenses 2020","Dépenses 2021", "Budget 2021", "Cumul"],
        crosshair: true
    },
    yAxis: {
        min: 0,
        title: {
            text: 'Budget Consommé (M€)'
        },
      gridLineColor: "#fff",
    },
  legend: {
    enabled: false,
  },
    tooltip: {
        headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
        pointFormat: '<tr><td style="padding:0"><b>{series.name} : </b></td>' +
            '<td style="padding:0"><b> {point.y:.1f} M€</b></td></tr>',
        footerFormat: '</table>',
        shared: true,
        useHTML: true,
       borderColor: 'transparent',
   borderRadius: 16,
   backgroundColor: '#fff',
    },
    plotOptions: {
        column: {
            pointPadding: 0.2,
            borderWidth: 0,
            grouping: false,
          dataLabels: {
                enabled: true
            }
        }
    },
    series: [{
        name: 'Budget',
        data: [{y:<%= (EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2018,1,1), Date.new(2018,12,31),"hauteperformance").sum('cp_conso')/1000000).to_i %>, color: "#2E5D63" },
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2019,1,1), Date.new(2019,12,31),"hauteperformance").sum('cp_conso')/1000000).to_i%>, color:"#2E5D63" },
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2020,1,1), Date.new(2020,12,31),"hauteperformance").sum('cp_conso')/1000000).to_i%>, color: "#2E5D63"},
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2021,1,1), Date.new(2021,12,31),"hauteperformance").sum('cp_conso')/1000000).to_i%>, color: "#2E5D63"},
          {y:<%=(EtatDepense.where('date >= ? AND date <= ? AND beneficiaire = ?', Date.new(2021,1,1), Date.new(2021,12,31),"hauteperformance").sum('cp_prevu')/1000000).to_i%>, color: "#bfbfbf"},
          {y:<%=(EtatDepense.where('beneficiaire = ?',"hauteperformance").sum('cp_conso')/1000000).to_i%>, color: "#76505B"}],
        pointPlacement: 0,
    },]
  });
</script> 
<script>
Highcharts.chart('container-chart', {
    chart: {
        type: 'waterfall',
    
        style:{
          fontFamily: "Marianne Regular",
          },
    },

    title: {
        text: null,
        style: {
                  color: "#8F8F8F",
                  fontWeight: "400",
          fontStyle: 'italic',
      fontSize: '16px',
                  },
    },

    xAxis: {
        type: 'category',
      labels: {
                formatter: function () {
                  if (this.value == "ΔSolideo"){
                    return '<a href="/etat-budget-solideo" style="color:#000091">' + this.value + '</a>'
                  } else {
                    return this.value 
                  }
                },
                useHTML: true,
            },
    },

    yAxis: {
      gridLineColor: '#E6F0FF', 
        title: {
            text: 'Montant €'
        }
    },

    legend: {
        enabled: false
    },

    tooltip: {
        pointFormat: '<b>${point.y:,.2f}</b> €',
      borderColor: 'transparent',
   borderRadius: 16,
   backgroundColor: '#fff',
    },

    series: [{
      borderColor: '#fff',
      data: [{
            name: 'Prévisionnel 2018',
            y: <%= EtatBudget.first.budget_total.to_i%>,
            color: "#bfbfbf",
        }, {
            name: 'ΔSolideo',
            y: <%= (EtatBudget.last.budget_solideo-EtatBudget.first.budget_solideo).to_i%>,
            color: "#C68D7B",
           
        }, {
            name: 'ΔCOJO',
            y: <%= (EtatBudget.last.budget_cojo-EtatBudget.first.budget_cojo).to_i%>,
            color: "#C68D7B",
        }, {
            name: 'Δhéritage',
            y: <%= (EtatBudget.last.budget_heritage-EtatBudget.first.budget_heritage).to_i%>,
            color: "#C68D7B",
        },{
            name: 'ΔHaute Performance',
            y: <%= (EtatBudget.last.budget_hauteperformance-EtatBudget.first.budget_hauteperformance).to_i%>,
            color: "#C68D7B",
        },  {
            name: 'Prévisionnel 2020',
            isSum: true,
            color: "#2E5D63"
        }],
        dataLabels: {
            enabled: true,
            formatter: function () {
                return Highcharts.numberFormat(this.y / 1000, 0, ',') + 'k';
            },
          
            style: {
                fontWeight: 'bold',
                color: '#000',
            
              fontFamily: 'Karla',
            }
        },
        pointPadding: 0
    }]
});
</script>